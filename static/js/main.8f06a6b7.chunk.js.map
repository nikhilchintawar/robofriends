{"version":3,"sources":["components/card/Card.jsx","components/card-list/CardList.jsx","components/search-box/SearchBox.jsx","utiliy/scroll/Scroll.jsx","components/error-boundry/ErrorBoundry.jsx","reducers.js","components/Header.jsx","containers/App.jsx","actions.js","constants.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","width","height","CardList","robots","map","users","i","key","SearchBox","searchField","searchChange","type","placeholder","value","onChange","Scroll","props","children","ErrorBoundry","state","hasError","error","info","this","setState","React","Component","initialStateSearch","initialStateRobots","isPending","Header","nextProps","nextState","App","onRequestRobots","handleSearchChange","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobotsReducer","requestRobotsReducer","dispatch","event","payload","target","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8f06a6b7.chunk.js","sourcesContent":["import React from 'react';\nimport \"./card.css\";\n\nconst Card = ({name, email, id}) => {\n        return(\n            <div className=\"card\">\n                <img src={`https://robohash.org/${id}?200Ã—200`} alt=\"test\" width=\"250px\" height=\"250px\"/>\n                <div className=\"info\">\n                    <h2>{name}</h2>\n                    <p className=\"email\">{email}</p>\n                </div>\n            </div>\n        )\n    }\n\nexport default Card;","import React from \"react\";\nimport Card from '../card/Card';\nimport './CardList.css';\n\nconst CardList = ({ robots })=> {\n//   if (true) {\n//       throw new Error(\"hahaha\")\n//   }\n    return (\n        <div className=\"cardList\">\n        {\n        robots.map((users, i) => {\n        return (<Card \n        key={i} \n        id={robots[i].id} \n        name={robots[i].name} \n        email={robots[i].email} />)\n    })\n        }\n        </div>\n    )\n}\n\n\nexport default CardList;","import React from 'react';\nimport \"./search-box.css\";\n\nconst SearchBox = ({searchField, searchChange}) => {\n    return (\n        <div className=\"search-box\">\n            <input \n            type=\"search\" \n            placeholder=\"Search Robots\"\n            value={searchField} \n            onChange={searchChange}  \n            className=\"search\" \n            />\n        </div>    \n    );\n}\n\nexport default SearchBox;","import React from 'react';\nimport './Scroll.css';\n\nconst Scroll = (props) => {\n    return(\n        <div className= \"scroll\">\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React from 'react';\n\n\nclass ErrorBoundry extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({ hasError: true })\n    }\n\n    render(){   \n            if (this.state.hasError) {\n                return <h1>That is an error</h1>\n            } else {\n                return this.props.children\n            }\n        \n    }\n}\n\nexport default ErrorBoundry;","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\n\nexport const searchRobotsReducer = (state = initialStateSearch, action= {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload })    \n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobotsReducer = (state = initialStateRobots, action={}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return {...state,\n                    isPending: true\n            } \n        case REQUEST_ROBOTS_SUCCESS:\n            return {\n                ...state,\n                robots: action.payload,\n                isPending: false\n            }\n            case REQUEST_ROBOTS_FAILED:\n                return {\n                    ...state,\n                    error: action.payload,\n                    isPending: false\n                }\n        default:\n            return state\n    }\n}","import React, { Component } from 'react';\n\n\nclass Header extends Component {\n\n    shouldComponentUpdate(nextProps, nextState){\n        return false\n    }\n    render() {\n        return (\n            <div>\n                <h1 className=\"heading\">ROBOFRIENDS</h1>\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React from 'react';\nimport CardList from '../components/card-list/CardList';\nimport SearchBox from '../components/search-box/SearchBox';\nimport \"./App.css\";\nimport Scroll from '../utiliy/scroll/Scroll';\nimport ErrorBoundry from '../components/error-boundry/ErrorBoundry';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\nimport { searchRobotsReducer } from '../reducers';\nimport Header from '../components/Header';\n\n\n\nclass App extends React.Component{\n\n    componentDidMount(){\n       this.props.onRequestRobots();\n    }\n\n\n    render(){\n        \n        const {searchField, handleSearchChange, robots, isPending} = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\n        })\n        return isPending \n            ?\n            <h2>Loading...</h2>\n            :\n               ( <div className=\"App\">\n                <Scroll>\n                <Header />\n                <SearchBox searchChange = {handleSearchChange} />\n                </Scroll> \n                <ErrorBoundry>\n                    <CardList robots={filteredRobots}/>\n                </ErrorBoundry>     \n                        \n                </div>\n            )\n        }\n        \n    }\n\n    const mapStateToProps = (state) => {\n        return {\n            searchField: state.searchRobotsReducer.searchField,\n            robots: state.requestRobotsReducer.robots,\n            isPending: state.requestRobotsReducer.isPending,\n            error: state.requestRobotsReducer.error\n        }\n    }\n\n    const mapDispatchToProps = (dispatch) => {\n        return{\n        handleSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, \n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED } from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch(`https://jsonplaceholder.typicode.com/users`)\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\n\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport App from \"./containers/App\";\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nimport { searchRobotsReducer, requestRobotsReducer } from './reducers';\n\nconst logger = createLogger()\n\nconst rootReducer = combineReducers({\n  searchRobotsReducer,\n  requestRobotsReducer\n})\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware ,logger))\n\n\nReactDOM.render(\n  \n  <React.StrictMode>\n  <Provider store={store}>\n  <App />   \n  </Provider>\n  </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}